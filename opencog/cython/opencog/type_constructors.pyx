
# DO NOT EDIT THIS FILE! This file was automatically generated from atom
# definitions in types.script by the macro OPENCOG_ADD_ATOM_TYPES
#
# This file contains basic python wrappers for atom creation.
#

from opencog.atomspace import AtomSpace, types

atomspace = None
def set_atomspace(new_atomspace):
    global atomspace
    atomspace = new_atomspace

def Notype(*args):
    return atomspace.add_link(types.Notype, args)
def Atom(*args):
    return atomspace.add_link(types.Atom, args)
def Node(node_name):
    return atomspace.add_node(types.Node, node_name)
def Link(*args):
    return atomspace.add_link(types.Link, args)
def ConceptNode(node_name):
    return atomspace.add_node(types.ConceptNode, node_name)
def NumberNode(node_name):
    return atomspace.add_node(types.NumberNode, node_name)
def OrderedLink(*args):
    return atomspace.add_link(types.OrderedLink, args)
def UnorderedLink(*args):
    return atomspace.add_link(types.UnorderedLink, args)
def SetLink(*args):
    return atomspace.add_link(types.SetLink, args)
def ListLink(*args):
    return atomspace.add_link(types.ListLink, args)
def MemberLink(*args):
    return atomspace.add_link(types.MemberLink, args)
def SubsetLink(*args):
    return atomspace.add_link(types.SubsetLink, args)
def AndLink(*args):
    return atomspace.add_link(types.AndLink, args)
def OrLink(*args):
    return atomspace.add_link(types.OrLink, args)
def NotLink(*args):
    return atomspace.add_link(types.NotLink, args)
def SequentialAndLink(*args):
    return atomspace.add_link(types.SequentialAndLink, args)
def AbsentLink(*args):
    return atomspace.add_link(types.AbsentLink, args)
def ContextLink(*args):
    return atomspace.add_link(types.ContextLink, args)
def TypeNode(node_name):
    return atomspace.add_node(types.TypeNode, node_name)
def TypeChoice(*args):
    return atomspace.add_link(types.TypeChoice, args)
def VariableNode(node_name):
    return atomspace.add_node(types.VariableNode, node_name)
def TypedVariableLink(*args):
    return atomspace.add_link(types.TypedVariableLink, args)
def VariableList(*args):
    return atomspace.add_link(types.VariableList, args)
def QuoteLink(*args):
    return atomspace.add_link(types.QuoteLink, args)
def LambdaLink(*args):
    return atomspace.add_link(types.LambdaLink, args)
def DefineLink(*args):
    return atomspace.add_link(types.DefineLink, args)
def BetaRedex(*args):
    return atomspace.add_link(types.BetaRedex, args)
def ConcreteLink(*args):
    return atomspace.add_link(types.ConcreteLink, args)
def SatisfactionLink(*args):
    return atomspace.add_link(types.SatisfactionLink, args)
def BindLink(*args):
    return atomspace.add_link(types.BindLink, args)
def ForAllLink(*args):
    return atomspace.add_link(types.ForAllLink, args)
def ExistsLink(*args):
    return atomspace.add_link(types.ExistsLink, args)
def AverageLink(*args):
    return atomspace.add_link(types.AverageLink, args)
def SatisfyingSetLink(*args):
    return atomspace.add_link(types.SatisfyingSetLink, args)
def ScholemLink(*args):
    return atomspace.add_link(types.ScholemLink, args)
def ImplicationLink(*args):
    return atomspace.add_link(types.ImplicationLink, args)
def EquivalenceLink(*args):
    return atomspace.add_link(types.EquivalenceLink, args)
def EvaluationLink(*args):
    return atomspace.add_link(types.EvaluationLink, args)
def AssociativeLink(*args):
    return atomspace.add_link(types.AssociativeLink, args)
def InheritanceLink(*args):
    return atomspace.add_link(types.InheritanceLink, args)
def SimilarityLink(*args):
    return atomspace.add_link(types.SimilarityLink, args)
def AttractionLink(*args):
    return atomspace.add_link(types.AttractionLink, args)
def ProcedureNode(node_name):
    return atomspace.add_node(types.ProcedureNode, node_name)
def GroundedProcedureNode(node_name):
    return atomspace.add_node(types.GroundedProcedureNode, node_name)
def SchemaNode(node_name):
    return atomspace.add_node(types.SchemaNode, node_name)
def GroundedSchemaNode(node_name):
    return atomspace.add_node(types.GroundedSchemaNode, node_name)
def PredicateNode(node_name):
    return atomspace.add_node(types.PredicateNode, node_name)
def GroundedPredicateNode(node_name):
    return atomspace.add_node(types.GroundedPredicateNode, node_name)
def DefinedRelationshipNode(node_name):
    return atomspace.add_node(types.DefinedRelationshipNode, node_name)
def SchemaExecutionLink(*args):
    return atomspace.add_link(types.SchemaExecutionLink, args)
def SchemaEvaluationLink(*args):
    return atomspace.add_link(types.SchemaEvaluationLink, args)
def ExecutionLink(*args):
    return atomspace.add_link(types.ExecutionLink, args)
def ExecutionOutputLink(*args):
    return atomspace.add_link(types.ExecutionOutputLink, args)
def AnchorNode(node_name):
    return atomspace.add_node(types.AnchorNode, node_name)
def QuantityLink(*args):
    return atomspace.add_link(types.QuantityLink, args)
def PlusLink(*args):
    return atomspace.add_link(types.PlusLink, args)
def TimesLink(*args):
    return atomspace.add_link(types.TimesLink, args)
def VirtualLink(*args):
    return atomspace.add_link(types.VirtualLink, args)
def GreaterThanLink(*args):
    return atomspace.add_link(types.GreaterThanLink, args)
def EqualLink(*args):
    return atomspace.add_link(types.EqualLink, args)
