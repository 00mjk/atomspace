#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{url} 
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "times" "default"
\font_sans "helvet" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Connectors and Variables
\end_layout

\begin_layout Author
Linas Vepstas
\end_layout

\begin_layout Date
2 May 2020
\end_layout

\begin_layout Abstract
Almost all classical work on logic and symbolic reasoning, and indeed, much
 of mathematics, including lambda calculus and term algebras, are built
 on the intuitive foundation of 
\begin_inset Quotes eld
\end_inset

variables
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

functions
\begin_inset Quotes erd
\end_inset

 that map between them.
 Modern work on linguistics and category theory indicates an alternative
 viewpoint: that of 
\begin_inset Quotes eld
\end_inset

connectors
\begin_inset Quotes erd
\end_inset

.
 In this view, the act of replacing a variable by a value, and 
\begin_inset Quotes eld
\end_inset

plugging it into a function
\begin_inset Quotes erd
\end_inset

 (beta-reduction) is a special case of connecting a pair of connectors.
\end_layout

\begin_layout Abstract
This is a short note clarifying the relationship between these two concepts.
 Noteworthy is that the concept of connectors is 
\begin_inset Quotes eld
\end_inset

more general
\begin_inset Quotes erd
\end_inset

, and that, as a mathematical framework, it is far less explored.
\end_layout

\begin_layout Section*
Introduction
\end_layout

\begin_layout Standard
In elementary mathematics, it is commonplace to speak of a variable, such
 as 
\begin_inset Formula $x$
\end_inset

, and functions of that variable, such as 
\begin_inset Formula $f(x)$
\end_inset

.
 The power of this abstraction is that variables can be assigned a value,
 and that value can be 
\begin_inset Quotes eld
\end_inset

plugged into
\begin_inset Quotes erd
\end_inset

 a function.
 For example, one asserts that 
\begin_inset Formula $x=42$
\end_inset

 and then ponders 
\begin_inset Formula $f(42)$
\end_inset

.
 This act of 
\begin_inset Quotes eld
\end_inset

plugging in
\begin_inset Quotes erd
\end_inset

 is formally called 
\begin_inset Quotes eld
\end_inset

beta reduction
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
This process of 
\begin_inset Quotes eld
\end_inset

plugging in
\begin_inset Quotes erd
\end_inset

 can be compared to the process of 
\begin_inset Quotes eld
\end_inset

connecting
\begin_inset Quotes erd
\end_inset

, for example, connecting together two jigsaw-puzzle pieces.
 When mating together connectors, one typically has a matched pair that
 can be mated: a plug that can be plugged into a socket.
 It should be clear that beta reduction is a special case of this: that
 
\begin_inset Formula $f(x)$
\end_inset

 is a 
\begin_inset Quotes eld
\end_inset

socket
\begin_inset Quotes erd
\end_inset

 into which values can be plugged into.
\end_layout

\begin_layout Standard
This observation seems nearly trivial; it is so painfully obvious that one
 wonders what more can be said.
 Yet there are tremendous consequences that arise from this, conseuqnces
 that are in some sense equally trivial and obvious.
 That something is 
\begin_inset Quotes eld
\end_inset

obvious
\begin_inset Quotes erd
\end_inset

 is perhaps an indicator that it is important.
 This note dwells on these 
\begin_inset Quotes eld
\end_inset

obvious
\begin_inset Quotes erd
\end_inset

 ideas, and demonstrates thier importance.
 The problem with 
\begin_inset Quotes eld
\end_inset

obviousness
\begin_inset Quotes erd
\end_inset

 is that it frames all manner of thinking: it is Aristotles 
\begin_inset Quotes eld
\end_inset

formal cause
\begin_inset Quotes erd
\end_inset

, applied to thinking.
 It is provides a normative framework in which all conversation takes place.
 Design and thinking happen in the foreground; there is a 
\begin_inset Quotes eld
\end_inset

figure
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

ground
\begin_inset Quotes erd
\end_inset

, and anything that is obvious falls into the background, becomes implicit,
 and serves as a barrier to further thought.
 Thus, the impetus for this note.
\end_layout

\begin_layout Standard
The primary point of this note is that, when one thinks of variables and
 functions, one is inevitabley lead to the notion of 
\begin_inset Quotes eld
\end_inset

directed acyclic graphs
\begin_inset Quotes erd
\end_inset

 (DAGs).
 That is, plugging variables into functions, and those into other functions
 invariably leads to a DAG, because the sense of direction of 
\begin_inset Quotes eld
\end_inset

plugging in
\begin_inset Quotes erd
\end_inset

 must be preserved: one cannot plug a variable into a value; one cannot
 plug a function into a variable; the plugging is always directed.
 By contrast, that act of connecting together connectors has no such constraint:
 a jigsaw puzzle is not a DAG; there is no jigsaw piece 
\begin_inset Quotes eld
\end_inset

at the top
\begin_inset Quotes erd
\end_inset

, and none 
\begin_inset Quotes eld
\end_inset

at the bottom
\begin_inset Quotes erd
\end_inset

.
 Although the connectors in a jigsaw puzzle have a polarity, the sense of
 direction that they offer is immaterial to the final construction.
\end_layout

\begin_layout Standard
The desired conclusion is that by approaching knowledge representation as
 an assemblege of connections, rather than as a unidirectional network of
 inferences, one can gain considerable power in working with the common
 problems and stumbling blocks of AI and AGI, including problems of planning,
 inference, constraint satisfaction, combinatorial explosion and the 
\begin_inset Quotes eld
\end_inset

frame problem
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection*
In philosophy:
\end_layout

\begin_layout Standard
Here's a hint of how pervasively important the conecept of variables and
 values can be.
 Some philosophers use these notions to anchor the idea of 
\begin_inset Quotes eld
\end_inset

objects
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

things
\begin_inset Quotes erd
\end_inset

 that 
\begin_inset Quotes eld
\end_inset

exist
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

An object is anything that can be the value of a variable, that is, anything
 we can talk about using pronouns, that is, anything.
\begin_inset Quotes erd
\end_inset

 (Van Inwagen 2002, 180)
\end_layout

\begin_layout Standard
This conception of an object then leads to confused discussions about the
 identity of indiscernables, and the importance of location (spacetime)
 in mereology.
 The notion of connectors can be used as an alternate foundation for the
 conception of 
\begin_inset Quotes eld
\end_inset

objects
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

identity
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

location
\begin_inset Quotes erd
\end_inset

.
 Specifically, one can instead define objects as 
\begin_inset Quotes eld
\end_inset

things that can participate in relationships
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection*
In term algebra:
\end_layout

\begin_layout Standard
The theory of term algebras is a specific branch of mathematics that deals
 with the abstract process of performing generic algebraic manipulations,
 as any mathematician or engineer might do when working with pencil and
 paper.
 It is important for the theory of computation, because much what we do
 with computers is to manipulate symbols; term algebras provide a coherent
 vocabulary of ideas for thinking about algorithms that manipulate symbols.
 This is, in turn, important for both logic, and for symbolic AI, since
 reasoning engines and algorithmic theorem provers are built on such symbolic
 manipulations.
\end_layout

\begin_layout Standard
Consider a typical definition of a term algebra.
 It consists of:
\end_layout

\begin_layout Itemize
A set of constants 
\begin_inset Formula $c_{0},c_{1},\cdots$
\end_inset


\end_layout

\begin_layout Itemize
A set of variables 
\begin_inset Formula $x,y,z,\cdots$
\end_inset


\end_layout

\begin_layout Itemize
A set of 
\begin_inset Formula $n$
\end_inset

-ary function symbols 
\begin_inset Formula $f\left(x_{1},\cdots,x_{n}\right)$
\end_inset


\end_layout

\begin_layout Standard
The terms of a term algebra are then anything that can be constructed from
 the above, by recurisvely 
\begin_inset Quotes eld
\end_inset

plugging in
\begin_inset Quotes erd
\end_inset

.
 That the resulting terms always have the structure of a DAG should be intuitive
ly obvious.
\end_layout

\begin_layout Standard
In type theory, it is common to assign types to the different constants,
 variables and function symbols; this does not alter the result that the
 terms are DAGs.
\end_layout

\begin_layout Subsubsection*
In set theory:
\end_layout

\begin_layout Standard
In (well-founded) (naive) set theory, there is effectively just one function
 symbol: the set, and only one constant: the empty set.
 There are no variables, in the sense that proper sets do not contain variables
 in them.
 Of course, in the definition of the axioms that define set theory, and
 in the articulation of the theory itself, it is impossible to avoid variables;
 its just that variables are not set elements.
 By definition, 
\begin_inset Quotes eld
\end_inset

well-foundedness
\begin_inset Quotes erd
\end_inset

 disallows infinitely recursive sets.
 Thus, effectively, all finite sets in set theory have the shape of a DAG.
\end_layout

\begin_layout Subsubsection*
In computer science:
\end_layout

\begin_layout Standard
Lambda calculus can be thought of as having arbitrary constants and varaibles,
 but only one function symbol: the lambda.
 It is effectively a theory of linear strings (sequences) of symbols arranged
 in order, on a line.
 Insofar as lambda expressions can be beta-reduced, they form a DAG.
 Lambda calculus is manifestly finite: it is very unusual to study countable
 or uncountable limits of lambda calculus.
 In general, lambda calculus is always assumed to be well-founded, so that
 the expressions are always DAGs.
 An exception to this is chemlambda (Buliga 2003), which redefines lambda
 as having input and output connectors, thus allowing looping connections
 to be made.
\end_layout

\begin_layout Standard
The general typed lambda calculus famously corresponds to computer programs,
 this is the Curry-Howard correspondance.
 Infinite loops can be thought of in two ways in computing.
 One way is as a non-directed graph: a loop, that calls back onto itself.
 The state transitions are described by points (for states) and arrows (denoting
 state transitions), arranged such that one (or more!) collections of arrows
 can be traced in a circular loop.
 The other way of thinking of infinite loops is as recursive structures:
 one unrolls the loop so that it becomes an infinitely-long unterminating
 sequence of arrows.
\end_layout

\begin_layout Standard
The moral of the story that is being presented here is that almost all of
 computer science is founded on a theory of DAGs.
 Even when loops are allowed, the graphs are formed from edges that are
 directed: the edges are always arrows.
 This is not the same as a general theory of connectors connecting things
 together.
\end_layout

\begin_layout Subsubsection*
In topology:
\end_layout

\begin_layout Standard
The infinite binary tree provides a simple example of unrolling a pair of
 interconnected loops.
 Axiomatically, a binary tree is constructed from a pair of left-right,
 and each element can be aonther pair.
 In this sense, both the left and right elements can loop back onto themselves;
 when unrolled, the tree becomes infinite DAG (rather than containing a
 pair of loops).
 The endpoints of a binary tree form the Cantor set; there are an uncountable
 infinity of them.
 These are the 
\begin_inset Quotes eld
\end_inset

points
\begin_inset Quotes erd
\end_inset

 of point-set topology.
\end_layout

\begin_layout Standard
One can also have a point-free topology, built on top of lattice theory.
 Rather than considering points as mereological simples, one instead focuses
 on the directedness of set inclusion.
 Starting with the notion of a partially-ordered set, the axioms of lattice
 theory allow one to concentrate on meets and joins, filters and ideals,
 frames and locales, without once bringing up the notion of a point.
 Yet, in the end, partial orders are founded on the idea of direction, of
 inclusion, with set theoretic notions of the same providing much of the
 intuititive grounding.
 There is a DAG, even if discussion of terminal elements is avoided.
\end_layout

\begin_layout Subsubsection*
In category theory:
\end_layout

\begin_layout Standard
The simply typed lambda calculus is important, as it is the 
\begin_inset Quotes eld
\end_inset

internal language
\begin_inset Quotes erd
\end_inset

 of 
\begin_inset Quotes eld
\end_inset

Cartesian closed categories
\begin_inset Quotes erd
\end_inset

.
 The Cartesian-closed catgories naturally describe 
\begin_inset Quotes eld
\end_inset

tuples
\begin_inset Quotes erd
\end_inset

 of 
\begin_inset Quotes eld
\end_inset

things
\begin_inset Quotes erd
\end_inset

: that is, things that can be placed in an ordered list.
 The 
\begin_inset Quotes eld
\end_inset

things
\begin_inset Quotes erd
\end_inset

 are presumed to be discernable items that have an identity.
 Indiscernables are not described by cartesian closed categories; for this,
 needs symmetric monoidal categories.
 Tensors and tensor algebras, vector spaces and Hilbert spaces famously
 belong to this category; the internal language is 
\begin_inset Quotes eld
\end_inset

linear logic
\begin_inset Quotes erd
\end_inset

.
 Yet, the tensor category is daggar-compact: it has a left-right symmetry
 to it that constrains structure.
\end_layout

\begin_layout Standard
A pending critique of neural nets is that they are founded on vector spaces
 (and thus are part of the tensor category, which is symmetric) whereas
 natural language is described by monoidal categories that are manifestly
 not symmetric.
 This observation has been pursued elsewhere, in various writings by this
 author.
\end_layout

\begin_layout Standard
Category theory itself is a theory of dots and arrows.
 Every dot has an arrow back to itself (thus, a loop), and arrows can be
 composed: if there is a sequence of two arrows conneting three dots, then
 there always is an arrow, going in the same sense, between the two endpoints.
 This is all that a category is.
\end_layout

\begin_layout Standard
The moral of the story that is being presented here is that almost all of
 computer science is founded on a theory of DAGs.
 Even when loops are allowed, the graphs are formed from edges that are
 directed: the edges are always arrows.
 This is not the same as a general theory of connectors connecting things
 together.
\end_layout

\begin_layout Subsubsection*
In model theory:
\end_layout

\begin_layout Standard
Model theory takes the idea of a Supplemented by relations.
 Theory of equality.
\end_layout

\begin_layout Subsubsection*
In knowledge representation:
\end_layout

\begin_layout Standard
is-a, has-a, part-of.
 gunk in philosophy.
\end_layout

\begin_layout Subsubsection*
In graph theory:
\end_layout

\begin_layout Standard
graph theory allows undirected edges.
\end_layout

\begin_layout Subsubsection*
In AI:
\end_layout

\begin_layout Standard
Inference, theorem proving, planning, consraint satisfaction.
\end_layout

\begin_layout Subsubsection*
In philosophy, again:
\end_layout

\begin_layout Standard
Can the idea of conector provide a foundation for Derrida's ideas of deconstruct
ion? If there is no difference between appearance and true form, or that
 the difference is undecidable, perhaps this is why?
\end_layout

\begin_layout Standard
connectors offer contrast
\end_layout

\begin_layout Standard
signifier and signified.
\end_layout

\begin_layout Standard
Deleuze, Lyotard
\end_layout

\begin_layout Section*
Bibliography
\end_layout

\begin_layout Itemize
Marius Buliga (2003).
 
\begin_inset Quotes eld
\end_inset

Artificial chemistry experiments with chemlambda, lambda calculus, interaction
 combinators.
\begin_inset Quotes erd
\end_inset

 https://arxiv.org/abs/2003.14332
\end_layout

\begin_layout Itemize
Van Inwagen, P.
 (2002).
 “The Number of Things.” 
\emph on
Philosophical Issues
\emph default
 12 pp.176–196.
\end_layout

\end_body
\end_document
