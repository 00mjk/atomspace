/*
 * tests/atoms/BetaReduceUTest.cxxtest
 *
 * Copyright (C) 2016 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atoms/base/Atom.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/core/ScopeLink.h>

using namespace opencog;

// Test the BetaReduce.
//
class BetaReduceUTest :  public CxxTest::TestSuite
{
private:
	AtomSpace _as;

public:
	BetaReduceUTest()
	{
		logger().set_print_to_stdout_flag(true);
	}

	void setUp() {}

	void tearDown() {}

	void test_unquote();
	void test_alpha_hiding();
};

#define N _as.add_node
#define L _as.add_link


// Test beta reduction involving quasi-quotes.
void BetaReduceUTest::test_unquote()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create ScopeLinks.
	Handle body =
		L(SET_LINK,
			N(VARIABLE_NODE, "$X"),
			L(QUOTE_LINK, N(VARIABLE_NODE, "$X")),
			L(QUOTE_LINK,
				L(SET_LINK,
					N(VARIABLE_NODE, "$X"),
					L(UNQUOTE_LINK, N(VARIABLE_NODE, "$X")))));

	Handle hscox =
		L(SCOPE_LINK, N(VARIABLE_NODE, "$X"), body);

	ScopeLinkPtr scox(ScopeLinkCast(hscox));
	TS_ASSERT(scox != nullptr);

	// Create a value to plug in;
	Handle concept = N(CONCEPT_NODE, "hippy chick");
	HandleSeq vals;
	vals.push_back(concept);

	// Perform beta reduction
	const Variables& vars = scox->get_variables();
	Handle redox = vars.substitute(body, vals);
	TS_ASSERT(redox != nullptr);

	redox = _as.add_atom(redox);
	printf("reduced set=%s\n", redox->toString().c_str());

	// This is the answer we expect to get:
	Handle oxy =
		L(SET_LINK,
			concept,
			L(QUOTE_LINK, N(VARIABLE_NODE, "$X")),
			L(QUOTE_LINK,
				L(SET_LINK,
					N(VARIABLE_NODE, "$X"),
					L(UNQUOTE_LINK, concept))));

	printf("expected set=%s\n", oxy->toString().c_str());

	// the reduced and the expected sets should be identical.
	TS_ASSERT(redox == oxy);

	logger().info("END TEST: %s", __FUNCTION__);
}

// Test beta reduction involving colliding variable names.
void BetaReduceUTest::test_alpha_hiding()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	logger().info("END TEST: %s", __FUNCTION__);
}
