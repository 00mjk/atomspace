/*
 * tests/atoms/FormulaUTest.cxxtest
 *
 * Copyright (C) 2019 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <math.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/atoms/base/Atom.h>
#include <opencog/atomspace/AtomSpace.h>

#include <cxxtest/TestSuite.h>

using namespace opencog;

class FormulaUTest :  public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	SchemeEval _eval;

public:
	FormulaUTest() : _eval(&_as)
	{
		logger().set_timestamp_flag(false);
		logger().set_print_to_stdout_flag(true);

		_eval.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "\")");
		_eval.eval("(load-from-path \"tests/atoms/formulas.scm\")");
	}

	void setUp() {}

	void tearDown() {}

	void test_strength_of();
	void test_formula();
};

#define MAXERR 1.0e-12

void FormulaUTest::test_strength_of()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	_eval.eval("(Concept \"A\" (stv 0.8 1.0))");
	_eval.eval("(Concept \"B\" (stv 0.6 0.9))");

	ValuePtr sof = _eval.eval_v("(cog-execute! (StrengthOf (Concept \"A\")))");
	printf("Get strenght_of=%s\n", sof->to_string().c_str());
	TS_ASSERT_EQUALS(sof->get_type(), FLOAT_VALUE);
	FloatValuePtr fvp = FloatValueCast(sof);
	TS_ASSERT_LESS_THAN(fabs(fvp->value()[0] - 0.8), MAXERR);

	ValuePtr cof = _eval.eval_v("(cog-execute! (ConfidenceOf (Concept \"B\")))");
	printf("Get conf_of=%s\n", cof->to_string().c_str());
	TS_ASSERT_EQUALS(cof->get_type(), FLOAT_VALUE);
	fvp = FloatValueCast(cof);
	TS_ASSERT_LESS_THAN(fabs(fvp->value()[0] - 0.9), MAXERR);

	ValuePtr pof = _eval.eval_v("(cog-execute! prod)");
	printf("Get product=%s\n", pof->to_string().c_str());
	TS_ASSERT_EQUALS(pof->get_type(), FLOAT_VALUE);
	fvp = FloatValueCast(pof);
	TS_ASSERT_LESS_THAN(fabs(fvp->value()[0] - 0.48), MAXERR);

	logger().info("END TEST: %s", __FUNCTION__);
}

void FormulaUTest::test_formula()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	TruthValuePtr tvp = _eval.eval_tv("(cog-evaluate! stv-const)");
	printf("Get stv-const=%s\n", tvp->to_string().c_str());
	TS_ASSERT_EQUALS(tvp->get_type(), SIMPLE_TRUTH_VALUE);
	FloatValuePtr fvp = FloatValueCast(ValueCast(tvp));
	TS_ASSERT_LESS_THAN(fabs(fvp->value()[0] - 0.7), MAXERR);
	TS_ASSERT_LESS_THAN(fabs(fvp->value()[1] - 0.314), MAXERR);

	tvp = _eval.eval_tv("(cog-evaluate! formula-stv)");
	printf("Get formula-stv=%s\n", tvp->to_string().c_str());
	TS_ASSERT_EQUALS(tvp->get_type(), SIMPLE_TRUTH_VALUE);
	fvp = FloatValueCast(ValueCast(tvp));
	TS_ASSERT_LESS_THAN(fabs(fvp->value()[0] - 0.52), MAXERR);
	TS_ASSERT_LESS_THAN(fabs(fvp->value()[1] - 0.9), MAXERR);

	logger().info("END TEST: %s", __FUNCTION__);
}
