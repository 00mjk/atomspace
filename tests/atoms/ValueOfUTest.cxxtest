/*
 * tests/atoms/ValueOfUTest.cxxtest
 *
 * Copyright (C) 2018 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atoms/core/ValueOfLink.h>
#include <opencog/atoms/execution/Instantiator.h>
#include <opencog/atoms/proto/FloatValue.h>
#include <opencog/atomspace/AtomSpace.h>

#include <cxxtest/TestSuite.h>

using namespace opencog;

#define al _as.add_link
#define an _as.add_node

class ValueOfUTest : public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	
public:

	void test_basic();
	void test_basic_value();
	void test_times();
	void test_plus();
};

// Make sure ValueOf actually fetches the value.
void ValueOfUTest::test_basic()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	Handle value = an(CONCEPT_NODE, "my value");
	Handle key = an(PREDICATE_NODE, "my key");
	Handle atom = an(CONCEPT_NODE, "some atom");

	atom->setValue(key, value);

	Handle valof = al(VALUE_OF_LINK, atom, key);

	Instantiator inst(&_as);
   Handle result = inst.execute(valof);

	printf("expect: %s", value->to_string().c_str());
	printf("result: %s\n", result->to_string().c_str());

	TS_ASSERT_EQUALS(value, result);

	logger().debug("END TEST: %s", __FUNCTION__);
}

// Make sure FloatValues work.
void ValueOfUTest::test_basic_value()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	ProtoAtomPtr value = createFloatValue(std::vector<double>{0.0, 1.0, 2.0});
	Handle key = an(PREDICATE_NODE, "my key");
	Handle atom = an(CONCEPT_NODE, "some atom");

	atom->setValue(key, value);

	Handle valof = al(VALUE_OF_LINK, atom, key);
	ProtoAtomPtr result = FunctionLinkCast(valof)->execute();

	printf("expect: %s", value->to_string().c_str());
	printf("result: %s\n", result->to_string().c_str());

	TS_ASSERT_EQUALS(value, result);

	logger().debug("END TEST: %s", __FUNCTION__);
}

// Make sure TimesLink works
void ValueOfUTest::test_times()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	ProtoAtomPtr value = createFloatValue(std::vector<double>{0.0, 1.0, 2.0});
	Handle key = an(PREDICATE_NODE, "my key");
	Handle atom = an(CONCEPT_NODE, "some atom");

	atom->setValue(key, value);

	Handle valof = al(VALUE_OF_LINK, atom, key);

	// scalar times vector --------------------------------------------
	Handle times = al(TIMES_LINK, an(NUMBER_NODE, "3"), valof);

	ProtoAtomPtr result = FunctionLinkCast(times)->execute();

	FloatValuePtr expect = createFloatValue(std::vector<double>{0.0, 3.0, 6.0});
	printf("expect: %s", expect->to_string().c_str());
	printf("result: %s\n", result->to_string().c_str());

	TS_ASSERT(*expect == *FloatValueCast(result));

	// value must not get corrupted.
	FloatValuePtr orig_value = createFloatValue(std::vector<double>{0.0, 1.0, 2.0});
	ProtoAtomPtr check_value = atom->getValue(key);
	TS_ASSERT(*orig_value == *FloatValueCast(check_value));

	// vector times scalar --------------------------------------------
	times = al(TIMES_LINK, valof, an(NUMBER_NODE, "7"));

	result = FunctionLinkCast(times)->execute();

	expect = createFloatValue(std::vector<double>{0.0, 7.0, 14.0});
	printf("expect: %s", expect->to_string().c_str());
	printf("result: %s\n", result->to_string().c_str());

	TS_ASSERT(*expect == *FloatValueCast(result));

	// value must not get corrupted.
	check_value = atom->getValue(key);
	TS_ASSERT(*orig_value == *FloatValueCast(check_value));

	// vector times vector ----------------------------------------------
	times = al(TIMES_LINK, valof, valof);

	result = FunctionLinkCast(times)->execute();

	expect = createFloatValue(std::vector<double>{0.0, 1.0, 4.0});
	printf("expect: %s", expect->to_string().c_str());
	printf("result: %s\n", result->to_string().c_str());

	TS_ASSERT(*expect == *FloatValueCast(result));

	// value must not get corrupted.
	check_value = atom->getValue(key);
	TS_ASSERT(*orig_value == *FloatValueCast(check_value));

	logger().debug("END TEST: %s", __FUNCTION__);
}

// Make sure PlusLink works
void ValueOfUTest::test_plus()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	ProtoAtomPtr value = createFloatValue(std::vector<double>{0.0, 1.0, 2.0});
	Handle key = an(PREDICATE_NODE, "my key");
	Handle atom = an(CONCEPT_NODE, "some atom");

	atom->setValue(key, value);

	Handle valof = al(VALUE_OF_LINK, atom, key);

	// scalar plus vector --------------------------------------------
	Handle times = al(PLUS_LINK, an(NUMBER_NODE, "3"), valof);

	ProtoAtomPtr result = FunctionLinkCast(times)->execute();

	FloatValuePtr expect = createFloatValue(std::vector<double>{3.0, 4.0, 5.0});
	printf("expect: %s", expect->to_string().c_str());
	printf("result: %s\n", result->to_string().c_str());

	TS_ASSERT(*expect == *FloatValueCast(result));

	// value must not get corrupted.
	FloatValuePtr orig_value = createFloatValue(std::vector<double>{0.0, 1.0, 2.0});
	ProtoAtomPtr check_value = atom->getValue(key);
	TS_ASSERT(*orig_value == *FloatValueCast(check_value));

	// vector plus scalar --------------------------------------------
	times = al(PLUS_LINK, valof, an(NUMBER_NODE, "7"));

	result = FunctionLinkCast(times)->execute();

	expect = createFloatValue(std::vector<double>{7.0, 8.0, 9.0});
	printf("expect: %s", expect->to_string().c_str());
	printf("result: %s\n", result->to_string().c_str());

	TS_ASSERT(*expect == *FloatValueCast(result));

	// value must not get corrupted.
	check_value = atom->getValue(key);
	TS_ASSERT(*orig_value == *FloatValueCast(check_value));

	// vector plus vector ----------------------------------------------
	times = al(PLUS_LINK, valof, valof);

	result = FunctionLinkCast(times)->execute();

	expect = createFloatValue(std::vector<double>{0.0, 2.0, 4.0});
	printf("expect: %s", expect->to_string().c_str());
	printf("result: %s\n", result->to_string().c_str());

	TS_ASSERT(*expect == *FloatValueCast(result));

	// value must not get corrupted.
	check_value = atom->getValue(key);
	TS_ASSERT(*orig_value == *FloatValueCast(check_value));

	logger().debug("END TEST: %s", __FUNCTION__);
}
