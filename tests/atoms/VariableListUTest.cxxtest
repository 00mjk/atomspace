/*
 * @file tests/atoms/VariableListUTest.cxxtest
 *
 * Copyright (C) 2015 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atoms/core/VariableList.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

// Test the VariableListLink
//
class VariableListUTest :  public CxxTest::TestSuite
{
private:
    AtomSpace *as;
    SchemeEval* eval;

public:
    VariableListUTest()
    {
        logger().set_level(Logger::DEBUG);
        logger().set_print_level_flag(true);
        logger().set_print_to_stdout_flag(true);

        as = new AtomSpace();
        eval = new SchemeEval(as);
    }

    ~VariableListUTest()
    {
        delete eval;
        delete as;
        // Erase the log file if no assertions failed.
        if (!CxxTest::TestTracker::tracker().suiteFailed())
                std::remove(logger().get_filename().c_str());
    }

    void setUp(void)
    {
        as->clear();
        config().set("SCM_PRELOAD",
            "opencog/atoms/base/core_types.scm, "
            "opencog/scm/utilities.scm, "
            "opencog/scm/opencog/exec.scm");

        load_scm_files_from_config(*as);
    }

    void tearDown(void)
    {
        as->clear();
    }

    // Test to make sure that the unbundling of DefinedType in
    // TypedVariableLink is taking place.
    void test_unbundle_defined_type_node()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        config().set("SCM_PRELOAD", "tests/atoms/variablelist-link.scm");
        load_scm_files_from_config(*as);

        Handle result = eval->eval_h("(cog-execute! predicate-search)");
        TSM_ASSERT_EQUALS("Expected true", result->getArity(),2);
        logger().info("END TEST: %s", __FUNCTION__);
    }
};
