/*
 * tests/atoms/container/JoinLinkUTest.cxxtest
 *
 * Copyright (C) 2020 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class JoinLinkUTest: public CxxTest::TestSuite
{
private:
    AtomSpace *as;
    SchemeEval* eval;

public:
    JoinLinkUTest(void)
    {
        logger().set_level(Logger::INFO);
        logger().set_print_to_stdout_flag(true);
        logger().set_timestamp_flag(false);
        logger().set_sync_flag(true);

        as = new AtomSpace();
        eval = new SchemeEval(as);
        eval->eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "\")");

    }

    ~JoinLinkUTest()
    {
        delete eval;
        delete as;
        // Erase the log file if no assertions failed.
        if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().get_filename().c_str());
    }

    void setUp(void);
    void tearDown(void);

    void test_basic(void);
};

void JoinLinkUTest::tearDown(void)
{
    as->clear();
}

void JoinLinkUTest::setUp(void)
{
    as->clear();
}

/*
 * basic stuff
 */
void JoinLinkUTest::test_basic(void)
{
    logger().info("BEGIN TEST: %s", __FUNCTION__);

#if 0
    eval->eval("(load-from-path \"tests/atoms/container/join.scm\")");

    Handle stuff = eval->eval_h(
        "(cog-execute! stuff)");
    printf("stuff = %s\n", stuff->to_string().c_str());
#endif

    logger().info("END TEST: %s", __FUNCTION__);
}
