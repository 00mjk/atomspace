/*
 * tests/atoms/execution/DefinedSchemaUTest.cxxtest
 *
 * Copyright (C) 2020 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class DefinedSchemaUTest: public CxxTest::TestSuite
{
private:
	AtomSpace *as;
	SchemeEval* eval;

public:
	DefinedSchemaUTest(void)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_print_to_stdout_flag(true);

		as = new AtomSpace();
		eval = new SchemeEval(as);
		eval->eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "\")");
		eval->eval("(load-from-path \"tests/atoms/execution/defined-schema.scm\")");
	}

	~DefinedSchemaUTest()
	{
		delete eval;
		delete as;
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp(void);
	void tearDown(void);

	void test_make_edge(void);
};

void DefinedSchemaUTest::tearDown(void)
{
}

void DefinedSchemaUTest::setUp(void)
{
}

/*
 * DefinedSchema unit test.
 */
void DefinedSchemaUTest::test_make_edge(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	Handle result = eval->eval_h("(cog-execute! mk-edge)");

	Handle edge = eval->eval_h(
	"	(EvaluationLink"
	"		(PredicateNode \"yikes\")"
	"		(ListLink"
	"			(ConceptNode \"X\")"
	"			(ConceptNode \"Y\")))"
	);

	printf("got %s\n", result->to_string().c_str());
	printf("expected %s\n", edge->to_string().c_str());

	TS_ASSERT(result == edge);

	// -------------------------------------------------

	logger().debug("END TEST: %s", __FUNCTION__);
}
