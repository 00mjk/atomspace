/*
 * tests/atoms/flow/DynamicUTest.cxxtest
 *
 * Copyright (C) 2020 Linas Vepstas
 * All Rights Reserved
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>

#include <opencog/util/Logger.h>

#include <cxxtest/TestSuite.h>

using namespace opencog;

#define al _as.add_link
#define an _as.add_node

class DynamicUTest : public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	SchemeEval _eval;
	
public:
	DynamicUTest(void);

	void setUp(void);
	void check(void);

	void test_formula_tv();
};

DynamicUTest::DynamicUTest(void) : _eval(&_as)
{
	logger().set_level(Logger::DEBUG);
	logger().set_print_to_stdout_flag(true);

	_eval.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "\")");
	_eval.eval("(load-from-path \"tests/atoms/flow/dynamic.scm\")");
}

void DynamicUTest::setUp(void)
{
}

// ====================================================================
// Basic copy of Value
void DynamicUTest::test_formula_tv()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	ValuePtr result = _eval.eval_v("tv-stream");
	// printf("result: %s\n", result->to_string().c_str());
	TS_ASSERT_EQUALS(result->gettype(), FORMULA_TRUTH_VALUE);

	// printf("expect: %s\n", tvp->to_string().c_str());

	// TS_ASSERT_EQUALS(tvp, result);

	logger().debug("END TEST: %s", __FUNCTION__);
}

// ====================================================================
