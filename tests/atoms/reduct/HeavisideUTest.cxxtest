/*
 * tests/atoms/HeavisideUTest.cxxtest
 *
 * Copyright (C) 2020 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/execution/ExecSCM.h>
#include <opencog/atoms/core/NumberNode.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class HeavisideUTest: public CxxTest::TestSuite
{
private:
	AtomSpace *as;
	SchemeEval* eval;

public:
	HeavisideUTest(void)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_print_to_stdout_flag(true);

		as = new AtomSpace();
		eval = new SchemeEval(as);
		eval->eval("(use-modules (opencog exec))");
	}

	~HeavisideUTest()
	{
		delete as;
		delete eval;
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp(void);
	void tearDown(void);

	void test_heaviside(void);
	void test_heavi_reduct(void);
};

void HeavisideUTest::tearDown(void)
{
	as->clear();
}

void HeavisideUTest::setUp(void)
{
	as->clear();
}

/*
 * Basic HeavisideLink unit test.
 */
void HeavisideUTest::test_heaviside(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// ---------
	Handle step = eval->eval_h(
		"(cog-execute! (Heaviside (Number -3 -2 -1 0 1 2 3)))"
	);
	printf("expecting step: %s\n", step->to_short_string().c_str());

	Handle estep = eval->eval_h("(NumberNode 0 0 0 0 1 1 1)");
	TS_ASSERT_EQUALS(step, estep);

	// ---------
	Handle squa = eval->eval_h(
		"(cog-execute! (Heaviside (Number -1 1 -1 1 -1 1 -3)))"
	);
	printf("expecting squa: %s\n", squa->to_short_string().c_str());

	Handle esqua = eval->eval_h("(NumberNode 0 1 0 1 0 1 0)");
	TS_ASSERT_EQUALS(squa, esqua);

	// ---------
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Expressions with variables.
 */
void HeavisideUTest::test_heavi_reduct(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

#if 0
	// ---------
	Handle inf = eval->eval_h(
			"(cog-execute! (PlusLink (NumberNode 0) (NumberNode \"inf\")))"
			"(cog-execute! (PlusLink (NumberNode 0) (NumberNode \"nan\")))"
	);
	printf("expecting res: %s\n", inf->to_short_string().c_str());

	Handle einf = eval->eval_h("(NumberNode \"inf\")");
	TS_ASSERT_EQUALS(inf, einf)

	// ---------
	Handle pninf4 = eval->eval_h(
			"(cog-execute! "
			"   (PlusLink"
			"      (NumberNode \"inf 0 3.0\")"
			"      (NumberNode \"inf -inf 1.0\")))"
	);
	printf("expecting res: %s\n", pninf4->to_short_string().c_str());

	Handle epninf4 = eval->eval_h("(NumberNode \"inf -inf 4.0\")");
	TS_ASSERT_EQUALS(pninf4, epninf4)
#endif

}
