/*
 * tests/atomspace/COWSpaceUTest.cxxtest
 *
 * Copyright (C) 2014,2015,2018 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atoms/base/Node.h>
#include <opencog/atoms/base/Link.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/truthvalue/SimpleTruthValue.h>

#include <cxxtest/TestSuite.h>

using namespace opencog;

// Test permsissions and Copy-On-Write(COW) support for multiple
// atomspaces. This is pursuant to github bug #1855 -- having
// permissioned access to values is a good thing to have.
//
class COWSpaceUTest :  public CxxTest::TestSuite
{
private:

	AtomSpace base;
	AtomSpace overlay;

public:
	COWSpaceUTest() {}

	void setUp() {}

	void tearDown() {}

	void testSimple()
	{
		TruthValuePtr tv1(SimpleTruthValue::createTV(0.1, 0.1));
		TruthValuePtr tv2(SimpleTruthValue::createTV(0.2, 0.2));

		// Create three atoms in three different atomspaces
		Handle h1 = base.add_node(CONCEPT_NODE, "A1 beef");
		h1->setTruthValue(tv1);
		Handle h2 = base.add_node(CONCEPT_NODE, "Grade A2");
		h2->setTruthValue(tv2);

		base.set_read_only();
		Handle h3 = base.add_node(CONCEPT_NODE, "3");

		TruthValuePtr tv3(SimpleTruthValue::createTV(0.3, 0.3));
		// Fetch three atoms in three different atomspaces
		Handle hn1 = as1.add_node(CONCEPT_NODE, "1");
		Handle hn2 = as2.add_node(NUMBER_NODE, "2");
		Handle hn3 = as3.add_node(VARIABLE_NODE, "3");

		// They should match the old handles
		TS_ASSERT(h1 == hn1);
		TS_ASSERT(h2 == hn2);
		TS_ASSERT(h3 == hn3);

		// ... and they should refer to the same atoms.
		TS_ASSERT(hn1->get_type() == h1->get_type());
		TS_ASSERT(hn2->get_type() == h2->get_type());
		TS_ASSERT(hn3->get_type() == h3->get_type());

		// The truth value *pointers* should be identical, as they
		// should point to the same exact truth value instance.
		TS_ASSERT(hn1->getTruthValue() == h1->getTruthValue());
		TS_ASSERT(hn2->getTruthValue() == h2->getTruthValue());
		TS_ASSERT(hn3->getTruthValue() == h3->getTruthValue());
	}

};
