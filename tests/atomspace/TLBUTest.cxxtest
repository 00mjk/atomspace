/*
 * tests/atomspace/TLBUTest.cxxtest
 *
 * Copyright (C) 2011 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <iostream>
#include <fstream>
#include <streambuf>
#include <stdio.h>

#include <opencog/atoms/base/Node.h>
#include <opencog/atomspace/TLB.h>
#include <opencog/atoms/base/atom_types.h>
#include <opencog/util/exceptions.h>

using namespace opencog;
using namespace std;

class TLBUTest :  public CxxTest::TestSuite
{
private:

public:
    TLBUTest() {
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testAdd() {
        NodePtr n(createNode(CONCEPT_NODE, "test"));
        UUID uuid = TLB::addAtom(n, Handle::INVALID_UUID);
        TS_ASSERT(Handle::INVALID_UUID != uuid);

        NodePtr nb(createNode(CONCEPT_NODE, "test"));

        // content-compare should work
        TS_ASSERT( *n == *nb);

        // XXX FIXME TLB should be ontent-based, but its not.
        UUID uuidb = TLB::addAtom(nb, Handle::INVALID_UUID);
        // TS_ASSERT(uuidb == uuid);
    }
};
