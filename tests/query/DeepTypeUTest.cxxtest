/*
 * tests/query/DeepTypeUTest.cxxtest
 *
 * Copyright (C) 2015 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>
#include <cxxtest/TestSuite.h>

using namespace opencog;

class DeepTypeUTest: public CxxTest::TestSuite
{
private:
	AtomSpace *as;
	SchemeEval* eval;

public:
	DeepTypeUTest(void)
	{
		// logger().setLevel(Logger::FINE);
		logger().setLevel(Logger::INFO);
		logger().setPrintToStdoutFlag(true);

		as = new AtomSpace();
		eval = new SchemeEval(as);

		config().set("SCM_PRELOAD",
			"opencog/atomspace/core_types.scm, "
			"opencog/scm/utilities.scm, "
			"opencog/scm/opencog/exec.scm, "
			"opencog/scm/opencog/query.scm");

		load_scm_files_from_config(*as);
	}

	~DeepTypeUTest()
	{
		delete as;
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().getFilename().c_str());
	}

	void setUp(void);
	void tearDown(void);

	void test_get_signature(void);
};

void DeepTypeUTest::tearDown(void)
{
}

void DeepTypeUTest::setUp(void)
{
}

/*
 * Basic deep-type unit test.
 */
void DeepTypeUTest::test_get_signature(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();
	config().set("SCM_PRELOAD", "tests/query/deep-types.scm");
	load_scm_files_from_config(*as);

	Handle hgnd = eval->eval_h("(cog-execute! get-foo)");
	Handle hans = eval->eval_h(
		"(SetLink "
		"    (InheritanceLink "
		"        (ConceptNode \"foo\") (ConceptNode \"bingo\")))");

	printf("Expected this: %s\n", hans->toString().c_str());
	printf("Found this answer: %s\n", hgnd->toString().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	// --------------------------------------------------------
	hgnd = eval->eval_h("(cog-execute! get-foobar)");
	hans = eval->eval_h(
		"(SetLink "
		"    (InheritanceLink "
		"        (ConceptNode \"foo\") (ConceptNode \"bingo\"))"
		"    (InheritanceLink "
		"        (ConceptNode \"bar\") (ConceptNode \"bingo\")))");

	printf("Expected this: %s\n", hans->toString().c_str());
	printf("Found this answer: %s\n", hgnd->toString().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	// --------------------------------------------------------
	hgnd = eval->eval_h("(cog-execute! predicate-search)");
	hans = eval->eval_h(
		"(SetLink "
		"   (EvaluationLink"
		"      (PredicateNode \"foo\")"
		"      (ListLink"
		"         (ConceptNode \"bingo\")"
		"         (ConceptNode \"yes!\")))"
		"   (EvaluationLink"
		"      (AnchorNode \"bar\")"
		"      (ListLink"
		"         (ConceptNode \"hurrah\")"
		"         (ConceptNode \"yay!\"))))");

	printf("Expected this: %s\n", hans->toString().c_str());
	printf("Found this answer: %s\n", hgnd->toString().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	logger().debug("END TEST: %s", __FUNCTION__);
}
