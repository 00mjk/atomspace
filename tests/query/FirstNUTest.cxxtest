/*
 * tests/query/FirstNUTest.cxxtest
 *
 * Copyright (C) 2016 OpenCog Foundation
 * All Rights Reserved
 *
 * Created by Jacek Åšwiergocki <jswiergo@gmail.com> February 2016
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class FirstNUTest: public CxxTest::TestSuite
{
private:
        AtomSpace *as;
        SchemeEval* eval;

public:
    FirstNUTest(void)
    {
        logger().set_level(Logger::DEBUG);
        logger().set_print_to_stdout_flag(true);

        as = new AtomSpace();
        eval = new SchemeEval(as);
    }

    ~FirstNUTest()
    {
        delete eval;
        delete as;
        // Erase the log file if no assertions failed.
        if (!CxxTest::TestTracker::tracker().suiteFailed())
                std::remove(logger().get_filename().c_str());
    }

    void setUp(void);
    void tearDown(void);

    void test_simple_satisfying_set(void);
    void test_disconnected_satisfying_set(void);
    void test_wrong_args_satisfying_set(void);

    void test_simple_bindlink(void);
    void test_disconnected_bindlink(void);
    void test_wrong_args_bindlink(void);

    void _test_wrong_args(std::string);
};

void FirstNUTest::tearDown(void)
{
}

void FirstNUTest::setUp(void)
{
    config().set("SCM_PRELOAD",
        "opencog/atoms/base/core_types.scm, "
        "opencog/scm/utilities.scm, "
        "opencog/scm/opencog/query.scm, "
        "tests/query/firstn.scm");

    load_scm_files_from_config(*as);
}

#define getarity(hand) LinkCast(hand)->getArity()

void FirstNUTest::_test_wrong_args(std::string command)
{
    eval->eval(command.c_str());
    bool eval_err = eval->eval_error();
    eval->clear_pending();
    TSM_ASSERT(command + " fails to throw error", eval_err);
}

void FirstNUTest::test_simple_satisfying_set(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    Handle find_0_men = eval->eval_h("(cog-satisfying-set-first-n 0 get-men)");
    TS_ASSERT_EQUALS(0, getarity(find_0_men));

    Handle find_1_man = eval->eval_h("(cog-satisfying-set-first-n 1 get-men)");
    TS_ASSERT_EQUALS(1, getarity(find_1_man));

    Handle find_3_men = eval->eval_h("(cog-satisfying-set-first-n 3 get-men)");
    TS_ASSERT_EQUALS(3, getarity(find_3_men));

    // only 3 men present
    Handle find_5_men = eval->eval_h("(cog-satisfying-set-first-n 5 get-men)");
    TS_ASSERT_EQUALS(3, getarity(find_5_men));
}

void FirstNUTest::test_disconnected_satisfying_set(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    Handle find_0_pairs = eval->eval_h("(cog-satisfying-set-first-n 0 get-disconnected)");
    TS_ASSERT_EQUALS(0, getarity(find_0_pairs));

    Handle find_2_pairs = eval->eval_h("(cog-satisfying-set-first-n 2 get-disconnected)");
    TS_ASSERT_EQUALS(2, getarity(find_2_pairs));

    Handle find_7_pairs = eval->eval_h("(cog-satisfying-set-first-n 7 get-disconnected)");
    TS_ASSERT_EQUALS(7, getarity(find_7_pairs));

    // only 9 pairs present
    Handle find_12_pairs = eval->eval_h("(cog-satisfying-set-first-n 12 get-disconnected)");
    TS_ASSERT_EQUALS(9, getarity(find_12_pairs));
}

void FirstNUTest::test_wrong_args_satisfying_set(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    _test_wrong_args("(cog-satisfying-set-first-n get-men)");
    _test_wrong_args("(cog-satisfying-set-first-n -1 get-men)");
    _test_wrong_args("(cog-satisfying-set-first-n \"blah\" get-men)");
    _test_wrong_args("(cog-satisfying-set-first-n (1 get-men))");
    _test_wrong_args("(cog-satisfying-set-first-n get-men 1)");
}

void FirstNUTest::test_simple_bindlink(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    Handle find_0_men = eval->eval_h("(cog-bind-first-n 0 bind-men)");
    TS_ASSERT_EQUALS(0, getarity(find_0_men));

    Handle find_1_man = eval->eval_h("(cog-bind-first-n 1 bind-men)");
    TS_ASSERT_EQUALS(1, getarity(find_1_man));

    Handle find_3_men = eval->eval_h("(cog-bind-first-n 3 bind-men)");
    TS_ASSERT_EQUALS(3, getarity(find_3_men));

    // only 3 men present
    Handle find_5_men = eval->eval_h("(cog-bind-first-n 5 bind-men)");
    TS_ASSERT_EQUALS(3, getarity(find_3_men));
}

void FirstNUTest::test_disconnected_bindlink(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    Handle find_0_pairs = eval->eval_h("(cog-bind-first-n 0 bind-disconnected)");
    TS_ASSERT_EQUALS(0, getarity(find_0_pairs));

    Handle find_2_pairs = eval->eval_h("(cog-bind-first-n 2 bind-disconnected)");
    TS_ASSERT_EQUALS(2, getarity(find_2_pairs));

    Handle find_7_pairs = eval->eval_h("(cog-bind-first-n 7 bind-disconnected)");
    TS_ASSERT_EQUALS(7, getarity(find_7_pairs));

    // only 9 pairs present
    Handle find_12_pairs = eval->eval_h("(cog-bind-first-n 12 bind-disconnected)");
    TS_ASSERT_EQUALS(9, getarity(find_12_pairs));
}

void FirstNUTest::test_wrong_args_bindlink(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    _test_wrong_args("(cog-bind-first-n bind-men)");
    _test_wrong_args("(cog-bind-first-n -1 bind-men)");
    _test_wrong_args("(cog-bind-first-n \"blah\" bind-men)");
    _test_wrong_args("(cog-bind-first-n (1 bind-men))");
    _test_wrong_args("(cog-bind-first-n bind-men 1)");
}
