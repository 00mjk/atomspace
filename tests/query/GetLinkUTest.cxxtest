/*
 * tests/query/GetLinkUTest.cxxtest
 *
 * Copyright (C) 2015 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>
#include <cxxtest/TestSuite.h>

using namespace opencog;

#define al as->add_link
#define an as->add_node

class GetLinkUTest: public CxxTest::TestSuite
{
private:
	AtomSpace *as;
	SchemeEval* eval;

public:
	GetLinkUTest(void)
	{
		logger().set_level(Logger::FINE);
		logger().set_print_to_stdout_flag(true);

		as = new AtomSpace();
		eval = new SchemeEval(as);

		config().set("SCM_PRELOAD",
			"opencog/atoms/base/core_types.scm, "
			"opencog/scm/utilities.scm, "
			"opencog/scm/opencog/exec.scm, "
			"opencog/scm/opencog/query.scm");

		load_scm_files_from_config(*as);
	}

	~GetLinkUTest()
	{
		delete as;
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().get_filename().c_str());
	}

	void setUp(void);
	void tearDown(void);

	void test_unary_get(void);
	void test_binary_get(void);
	void test_free_bound(void);
	void test_eval_clause(void);
	void test_disconnected_binary_get(void);
	void test_disconnected_empty(void);
	// void test_disconnected_const_eval(void);
};

void GetLinkUTest::tearDown(void)
{
}

void GetLinkUTest::setUp(void)
{
}

/*
 * Basic single-variable GetLink unit test.
 */
void GetLinkUTest::test_unary_get(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();
	config().set("SCM_PRELOAD", "tests/query/get-link.scm");
	load_scm_files_from_config(*as);

	Handle hgnd = eval->eval_h("(cog-satisfying-set is-human)");
	Handle hans = eval->eval_h(
		"(SetLink (ConceptNode \"Ben\") (ConceptNode \"Linas\"))");

	printf("Expected this: %s\n", hans->toString().c_str());
	printf("Found this answer: %s\n", hgnd->toString().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Two-variable GetLink unit test.
 */
void GetLinkUTest::test_binary_get(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();
	config().set("SCM_PRELOAD", "tests/query/get-link.scm");
	load_scm_files_from_config(*as);

	Handle hgnd = eval->eval_h("(cog-satisfying-set is-something)");
	Handle hans = eval->eval_h(
		"(SetLink "
		"(ListLink (ConceptNode \"Ben\") (ConceptNode \"human\"))"
		"(ListLink (ConceptNode \"Linas\") (ConceptNode \"human\"))"
		"(ListLink (ConceptNode \"Sparky\") (ConceptNode \"dog\")))");

	printf("Expected this: %s\n", hans->toString().c_str());
	printf("Found this answer: %s\n", hgnd->toString().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Two-variable GetLink unit test; one is free one is bound.
 */
void GetLinkUTest::test_free_bound(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	config().set("SCM_PRELOAD", "tests/query/get-link.scm");
	load_scm_files_from_config(*as);

	Handle hgnd = eval->eval_h("(cog-satisfying-set is-query)");

	Handle hans = eval->eval_h("(SetLink (ConceptNode \"human\"))");

	printf("Expected this: %s\n", hans->toString().c_str());
	printf("Found this answer: %s\n", hgnd->toString().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Evaluatable clause GetLink unit test;
 */
void GetLinkUTest::test_eval_clause(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();
	config().set("SCM_PRELOAD", "tests/query/get-link-eval.scm");
	load_scm_files_from_config(*as);

	Handle hgnd = eval->eval_h("(cog-satisfying-set get)");

	Handle hans = eval->eval_h("(SetLink"
	                           "   (ListLink"
	                           "      (ConceptNode \"glib\")"
	                           "      (ConceptNode \"blab\")"
	                           "      (EvaluationLink"
	                           "         (ConceptNode \"glib\")"
	                           "         (ConceptNode \"blab\"))))");

	printf("Expected this: %s\n", hans->toString().c_str());
	printf("Found this answer: %s\n", hgnd->toString().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Two-variable GetLink unit test
 */
void GetLinkUTest::test_disconnected_binary_get(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();
	config().set("SCM_PRELOAD", "tests/query/get-link.scm");
	load_scm_files_from_config(*as);

	Handle g_take_contain = eval->eval_h("g-take-contain");
	Handle hgnd = satisfying_set(as, g_take_contain);
	Handle hans = eval->eval_h(
		"(SetLink "
		"(ListLink (ConceptNode \"John\") (ConceptNode \"compound-A\")))");

	printf("Expected this: %s\n", hans->toString().c_str());
	printf("Found this answer: %s\n", hgnd->toString().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Two disconnected components, only one of them has a solution, so
 * the whole request has no solution. It should stop at the first
 * component with no solution, no need to explore the second
 * component.
 */
void GetLinkUTest::test_disconnected_empty(void) {
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();

	Handle inh_ground = al(INHERITANCE_LINK,
	                       an(CONCEPT_NODE, "A"),
	                       an(CONCEPT_NODE, "B")),
		comp_1 = al(INHERITANCE_LINK,
		            an(VARIABLE_NODE, "$A"),
		            an(VARIABLE_NODE, "$B")),
		comp_2 = al(IMPLICATION_LINK,
		            an(VARIABLE_NODE, "$X"),
		            an(VARIABLE_NODE, "$Y")),
		pat = al(AND_LINK, comp_1, comp_2),
		gl = al(GET_LINK, pat),
		result = satisfying_set(as, gl),
		expect = al(SET_LINK, HandleSeq());

	printf("Expected this: %s\n", expect->toString().c_str());
	printf("Found this answer: %s\n", result->toString().c_str());

	TS_ASSERT_EQUALS(result, expect);

	logger().debug("END TEST: %s", __FUNCTION__);
}

// This crashes the pattern matcher so is disabled for now.
// /*
//  * Two disconnected components, one evaluatable is constant
//  */
// void GetLinkUTest::test_disconnected_const_eval(void) {
// 	logger().debug("BEGIN TEST: %s", __FUNCTION__);

// 	as->clear();

// 	Handle inh_ground = al(INHERITANCE_LINK,
// 	                       an(CONCEPT_NODE, "A"),
// 	                       an(CONCEPT_NODE, "B")),
// 		real_comp = al(INHERITANCE_LINK,
// 		               an(VARIABLE_NODE, "$A"),
// 		               an(VARIABLE_NODE, "$B")),
// 		virt_comp = al(EVALUATION_LINK,
// 		               an(GROUNDED_PREDICATE_NODE, "dummy"),
// 		               al(LIST_LINK,
// 		                  an(CONCEPT_NODE, "A"))),
// 		pat = al(AND_LINK, real_comp, virt_comp),
// 		gl = al(GET_LINK, pat),
// 		result = satisfying_set(as, gl),
// 		expect = al(SET_LINK, HandleSeq());

// 	printf("Expected this: %s\n", expect->toString().c_str());
// 	printf("Found this answer: %s\n", result->toString().c_str());

// 	TS_ASSERT_EQUALS(result, expect);

// 	logger().debug("END TEST: %s", __FUNCTION__);
// }

#undef al
#undef an
