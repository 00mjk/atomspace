/*
 * tests/query/ScopeUTest.cxxtest
 *
 * Copyright (C) 2016 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class ScopeUTest: public CxxTest::TestSuite
{
private:
	AtomSpace *as;
	SchemeEval* eval;

public:
	ScopeUTest(void)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_print_to_stdout_flag(true);

		as = new AtomSpace();
		eval = new SchemeEval(as);
		eval->eval("(add-to-load-path \"..\")");
		eval->eval("(add-to-load-path \"../../..\")");
		eval->eval("(use-modules (opencog query))");
	}

	~ScopeUTest()
	{
		delete eval;
		delete as;
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp(void);
	void tearDown(void);

	void test_alpha(void);
	void test_alpha_reverse(void);
	void test_search(void);
	void test_search_reverse(void);
};

void ScopeUTest::tearDown(void)
{
	as->clear();
}

void ScopeUTest::setUp(void)
{
	as->clear();
	eval->eval("(load-from-path \"tests/query/test_types.scm\")");
}

/*
 * Test alpha conversion.
 */
void ScopeUTest::test_alpha(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/scope-search.scm\")");

	Handle c1 = eval->eval_h("(content-1)");
	Handle c2 = eval->eval_h("(content-2)");
	printf("c2 %s\n", c2->toString().c_str());

	TS_ASSERT_EQUALS(c1, c2);
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Test alpha conversion.
 */
void ScopeUTest::test_alpha_reverse(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/scope-search.scm\")");

	// Reverse the order of creation
	Handle c2 = eval->eval_h("(content-2)");
	Handle c1 = eval->eval_h("(content-1)");
	printf("c1 %s\n", c1->toString().c_str());

	TS_ASSERT_EQUALS(c1, c2);
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Test search of embedded scope links
 */
void ScopeUTest::test_search(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/scope-search.scm\")");

	Handle c1 = eval->eval_h("(content-1)");
	Handle r1 = eval->eval_h("(cog-bind (member-to-evaluation-2-1-rule))");

	Handle c2 = eval->eval_h("(content-2)");
	Handle r2 = eval->eval_h("(cog-bind (member-to-evaluation-2-1-rule))");

	TS_ASSERT_EQUALS(c1, c2);
	TS_ASSERT_EQUALS(r1, r2);
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Test search of embedded scope links.
 * Same as above, but reversed order.
 */
void ScopeUTest::test_search_reverse(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/scope-search.scm\")");

	Handle c2 = eval->eval_h("(content-2)");
	Handle r2 = eval->eval_h("(cog-bind (member-to-evaluation-2-1-rule))");

	Handle c1 = eval->eval_h("(content-1)");
	Handle r1 = eval->eval_h("(cog-bind (member-to-evaluation-2-1-rule))");

	TS_ASSERT_EQUALS(c1, c2);
	TS_ASSERT_EQUALS(r1, r2);
	logger().debug("END TEST: %s", __FUNCTION__);
}
